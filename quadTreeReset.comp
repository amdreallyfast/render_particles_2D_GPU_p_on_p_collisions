#version 440

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;


/*-----------------------------------------------------------------------------------------------
Description:
    Contains all info necessary for a single node of the quad tree.  It is a dumb container 
    meant for use only by ParticleQuadTree.
Creator:    John Cox (12-17-2016)
-----------------------------------------------------------------------------------------------*/
struct ParticleQuadTreeNode
{
    // this array size MUST match the value specified on the CPU side
    int _indicesForContainedParticles[25];
    int _numCurrentParticles;

    // for optimizing quad tree population with particles
    // Note: When the quad tree is populated by particles, each possible node will have its own 
    // thread in the compute shader.  That means that every node must examine every possible 
    // particle in the particle SSBO.  when it is time for the node to subdivide (this is why 
    // the compute shader is divided up between the number of nodes and not the number of 
    // particles), then this value will be set so that the threads for the child nodes don't 
    // have to start the particle counting all over again.
    int _startingParticleIndex;

    int _inUse;
    int _isSubdivided;
    int _childNodeIndexTopLeft;
    int _childNodeIndexTopRight;
    int _childNodeIndexBottomRight;
    int _childNodeIndexBottomLeft;

    // left and right edges implicitly X, top and bottom implicitly Y
    float _leftEdge;
    float _topEdge;
    float _rightEdge;
    float _bottomEdge;

    int _neighborIndexLeft;
    int _neighborIndexTopLeft;
    int _neighborIndexTop;
    int _neighborIndexTopRight;
    int _neighborIndexRight;
    int _neighborIndexBottomRight;
    int _neighborIndexBottom;
    int _neighborIndexBottomLeft;
};

// TODO: header
uniform uint uMaxQuadTreeNodeCount;
uniform uint uNumStartingNodes;
layout (std430) buffer QuadTreeNodeBuffer
{
    ParticleQuadTreeNode AllQuadTreeNodes[];
};

/*-----------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.
Parameters: None
Returns:    None
Creator: John Cox (1-10-2017)
-----------------------------------------------------------------------------------------------*/
void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index < uMaxParticleCount)
    {
        ParticleQuadTreeNode node = AllQuadTreeNodes[index];

        // don't bother resetting the particle indices to 0 because they'll be run over the next 
        // time that the node is populated with particles
        node._numCurrentParticles = 0;

        // no subdivision by default
        node._isSubdivided = 0;
        node._childNodeIndexTopLeft = -1;
        node._childNodeIndexTopRight = -1;
        node._childNodeIndexBottomRight = -1;
        node._childNodeIndexBottomLeft = -1;

        if (index < uNumStartingNodes)
        {
            node._inUse = 0;
        }

        // write it back
        AllQuadTreeNodes[index] = node;
    }
}
