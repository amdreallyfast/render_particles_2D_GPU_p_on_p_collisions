#version 440

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

/*-----------------------------------------------------------------------------------------------
Description:
    Contains all info necessary for a single node of the quad tree.  It is a dumb container 
    meant for use only by ParticleQuadTree.
Creator:    John Cox (12-17-2016)
-----------------------------------------------------------------------------------------------*/
const uint MAX_PARTICLES_PER_NODE = 100;
struct ParticleQuadTreeNode
{
    // this array size MUST match the value specified on the CPU side
    uint _indicesForContainedParticles[MAX_PARTICLES_PER_NODE];
    uint _numCurrentParticles;

    int _inUse;
    int _isSubdivided;
    uint _childNodeIndexTopLeft;
    uint _childNodeIndexTopRight;
    uint _childNodeIndexBottomRight;
    uint _childNodeIndexBottomLeft;

    // left and right edges implicitly X, top and bottom implicitly Y
    float _leftEdge;
    float _topEdge;
    float _rightEdge;
    float _bottomEdge;

    uint _neighborIndexLeft;
    uint _neighborIndexTopLeft;
    uint _neighborIndexTop;
    uint _neighborIndexTopRight;
    uint _neighborIndexRight;
    uint _neighborIndexBottomRight;
    uint _neighborIndexBottom;
    uint _neighborIndexBottomLeft;
};

/*-----------------------------------------------------------------------------------------------
Description:
    Stores info about a single particle.  Must match the version on the CPU side.
Creator: John Cox (9-25-2016)
-----------------------------------------------------------------------------------------------*/
struct Particle
{
    vec4 _pos;
    vec4 _vel;
    vec4 _netForceThisFrame;
    int _collisionCountThisFrame;
    float _mass;
    float _radiusOfInfluence;
    uint _indexOfNodeThatItIsOccupying;
    int _isActive;
};

/*-----------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the ParticleQuadTreeNodes that this simulation is running.  
    Rather self-explanatory.
Creator: John Cox (1-10-2017)
-----------------------------------------------------------------------------------------------*/
layout (std430) buffer QuadTreeNodeBuffer
{
    ParticleQuadTreeNode AllNodes[];
};

/*-----------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the particles that this simulartion is running.  Rather 
    self-explanatory.
    
    Binding points are relevant only to a particular shader (that is, not to the OpenGL context 
    as a whole) and are set in the SSBO's ConfigureCompute(...) function.
Creator: John Cox (9-25-2016)
-----------------------------------------------------------------------------------------------*/
uniform uint uMaxParticles;
layout (std430) buffer ParticleBuffer
{
    Particle AllParticles[];
};


// TODO: header
uniform float uInverseDeltaTimeSec;
void ParticleCollisionP1WithP2(uint p1Index, uint p2Index)
{
    if (p1Index == p2Index)
    {
        // no comparison with self
        return;
    }

    // Note: ONLY change p1.  This shader is being run per particle, so the other particle will 
    // do the same calculation with this particle.
    Particle p1 = AllParticles[p1Index];
    Particle p2 = AllParticles[p2Index];

    vec4 p1ToP2 = p1._pos - p2._pos;

    // partial pythagorean theorem
    float distanceBetweenSqr = (p1ToP2.x * p1ToP2.x) + (p1ToP2.y * p1ToP2.y);

    float minDistanceForCollisionSqr = (p1._radiusOfInfluence + p2._radiusOfInfluence);
    minDistanceForCollisionSqr = minDistanceForCollisionSqr * minDistanceForCollisionSqr;

    if (distanceBetweenSqr > minDistanceForCollisionSqr)
    {
        // nothing to do
        return;
    }

//    // elastic collision with conservation of momentum
//    // Note: For an elastic collision between two particles of equal mass, the velocities of the 
//    // two will be exchanged.  I could use this simplified idea for this demo, but I want to 
//    // eventually have the option of different masses of particles, so I will use the general 
//    // case elastic collision calculations (bottom of page at link).
//    // http://hyperphysics.phy-astr.gsu.edu/hbase/colsta.html
//
//    // for elastic collisions between two masses (ignoring rotation because these particles are 
//    // points), use the calculations from this article (I followed them on paper too and it 
//    // seems legit)
//    // http://www.gamasutra.com/view/feature/3015/pool_hall_lessons_fast_accurate_.php?page=3
//
//    vec4 normalizedLineOfContact = inversesqrt(distanceBetweenSqr) * p1ToP2;
//
//    // ??what else do I call these??
//    // Note: I don't have an intuitive understanding of this calculation, but it works.  If I 
//    // understood it better, then I could write better comments, but I don't, so I'm keeping it 
//    // the way that I found in the gamasutra article.
//    float a1 = dot(p1._vel, p1ToP2);
//    float a2 = dot(p2._vel, p1ToP2);
//    float fraction = (2.0f * (a1 - a2)) / (p1._mass + p2._mass);
//    vec4 p1VelocityPrime = p1._vel - (fraction * p2._mass) * normalizedLineOfContact;
//
//    // delta momentum (impulse) = force * delta time
//    // therefore force = delta momentum / delta time
//    vec4 p1InitialMomentum = p1._vel * p1._mass;
//    vec4 p1FinalMomentum = p1VelocityPrime * p1._mass;
//    vec4 p1Force = (p1FinalMomentum - p1InitialMomentum) * uInverseDeltaTimeSec;
//    
//    // rathering than writing back the whole particle over and over for each call to this 
//    // function, just write the values that need to be written
//    AllParticles[p1Index]._netForceThisFrame += p1Force;
    AllParticles[p1Index]._collisionCountThisFrame += 1;
}

/*-----------------------------------------------------------------------------------------------
Description:
    Governs the particle-particle collisions within this node and for each particle with the 
    node's neighbor, if necessary.
Parameters: 
    particleIndex   The particle that this shader is running for.
    nodeIndex       The quad tree node whose particles will be checked for collision.
Returns:    None
Creator:    John Cox (1-3-2017)
-----------------------------------------------------------------------------------------------*/
void ParticleCollisionsWithinNode(uint particleIndex, uint nodeIndex)
{
    ParticleQuadTreeNode node = AllNodes[nodeIndex];
    
    for (uint pCount = 0; pCount < node._numCurrentParticles - 1; pCount++)
    {
        uint otherParticleIndex = node._indicesForContainedParticles[pCount];
        if (otherParticleIndex < 0 || (otherParticleIndex > (16384 - 1)))
        {
            continue;
        }

        AllParticles[particleIndex]._collisionCountThisFrame += 1;
//
//        ParticleCollisionP1WithP2(particleIndex, otherParticleIndex);
    }
}

// TODO: header
void ParticleCollisionsWithNeighboringNode()
{
}


/*-----------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.  It governs which nodes the particle will check 
    against for collisions.
Parameters: None
Returns:    None
Creator: John Cox (1-21-2017) (adapted from CPU version, 12-17-2016)
-----------------------------------------------------------------------------------------------*/
void main()
{
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= uMaxParticles)
    {
        return;
    }

    AllParticles[particleIndex]._collisionCountThisFrame = 3;
    AllParticles[particleIndex]._indexOfNodeThatItIsOccupying = 13;

    Particle p = AllParticles[particleIndex];

    if (p._isActive == 0)
    {
        return;
    }

    //ParticleCollisionsWithinNode(particleIndex, p._indexOfNodeThatItIsOccupying);
}

